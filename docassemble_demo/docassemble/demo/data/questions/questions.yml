metadata:
  description: |
    This is a demonstration of the docassemble system.
  authors:
    - name: Jonathan Pyle
      organization: Example, Inc.
  revision_date: 2015-09-28
comment: |
  A "metadata" block contains information about the YAML file, such as
  the name of the author.
---
interview help:
  heading: About this web site
  content: |
    Answer each question.  At the end, you may be given a document that you
    can save.

    If you see a word written in green text, you can click on it to
    see more information about the word.  You can try this out by here
    to find out more about rhododendron plants.
comment: |
  An "interview help" block adds text to the "Help" page of every question in the
  interview.  If the question has help text of its own, the "interview help" will
  appear after the question-specific help.
---
include:
  - basic-questions.yml
comment: |
  This loads some question definitions that are common to many legal
  interviews.  It also defines basic variables like "user" and sets the
  names of icons that you can use to "decorate" your questions.

  The "basic-questions.yml" file is in the docassemble.base package, in the
  directory docassemble/base/data/questions.

  You can include question files from other packages by explicitly referring
  to their package names.  E.g., "docassemble.helloworld:questions.yml" refers
  to the file questions.yml in the docassemble/helloworld/data/questions directory.
---
image sets:
  freepik:
    attribution: |
      Icon made by [Freepik](http://www.flaticon.com/authors/freepik)
    images:
      baby: crawling.svg
      people: users6.svg
      injury: accident3.svg
comment: |
  An "image sets" block defines the names of icons that you can use to
  "decorate" your questions.  Loading the "basic-questions.yml" file
  already defined a number of icons, but this block defines some more
  icons.

  Since this file, questions.yml, is in the docassemble.demo package, the
  image files referenced here are also in the docassemble.demo package.  The
  files are located in the directory docassemble/demo/data/static.

  Since most free icons available on the internet require attribution,
  the "image sets" block allows you to specify what attribution text
  to use for particular icons.  The web app shows the appropriate
  attribution text at the bottom of any page that uses one of the
  icons.
---
imports:
  - datetime
  - dateutil.relativedelta
  - dateutil.parser
  - us
comment: |
  This loads some Python modules that we will need in the interview.
---
objects:
  - village_idiot: Individual
  - role_change: RoleChangeTracker
comment: |
  In a question below we will refer to the variable "village_idiot."
  This "objects" block creates the variable "village_idiot" and
  specifies that it is an object of type "Individual."  It is
  important to define objects early on in your interview, before any
  "mandatory" code blocks.
---
code: |
  advocate.name.first = "John"
  advocate.name.last = "Smith"
  advocate.email = "jpyle@philalegal.org"
---
terms:
  rhododendron: |
     A genus of shrubs or small trees, often having handsome
     evergreen leaves, and remarkable for the beauty of their
     flowers.
  custody order: |
    An order signed by a family court judge that says who gets to have what
    kind of custody over a child.
  complaint: |
    A document that you file in court to start a lawsuit.
  lawyer: |
    Someone with a license to practice law.
  plaintiff: |
    The person who starts a case.
  defendant: |
    The person who is on the defensive in a case.  In a lawsuit, the
    plaintiff sues the defendant.
comment: |
  Sometimes you will use vocabulary that the user may or may not know.
  Instead of interrupting the flow of your questions to define every
  term, you can define certain vocabulary words, and docassemble will
  turn them into hyperlinks wherever they appear.  When the user
  clicks on the hyperlink, a popup appears with the word's definition.
---
event: role_event
question: You are done for now.
subquestion: |
  % if 'advocate' in role_needed:
  An advocate needs to review your answers before you can proceed.

  Please remember the following link and come back to it when you receive notice to do so:

  [${ interview_url() }](${ interview_url() })  
  % else:
  Thanks, the client needs to resume the interview now.
  % endif

  % if role_change.send_email(role_needed, advocate={'to': advocate, 'email': role_event_email_to_advocate}, client={'to': client, 'email': role_event_email_to_client}):
  An e-mail has been sent.
  % endif
decoration: exit
buttons:
  - Exit: leave
---
template: role_event_email_to_advocate
subject: |
  Client interview waiting for your attention: ${ client }
content: |
  A client, ${ client }, has partly finished an interview.
  ${ client.pronoun_subjective(capitalize=True, thirdperson=True) }
  needs you to review
  ${ client.pronoun_possessive('answers', thirdperson=True) }
  so that ${ client.pronoun_subjective(thirdperson=True) } can obtain
  ${ client.pronoun_possessive('advice letter', thirdperson=True) }
  and ${ pleading.title }.

  Please go to [the interview](${ interview_url() }) as soon as possible.

  Thank you!
---
template: role_event_email_to_client
subject: |
  Your interview answers have been reviewed
content: |
  ${ client.salutation() } ${ client.name.last }:
  
  An advocate has finished reviewing your answers.

  Please go to [${ interview_url() }](${ interview_url() })
  to continue the interview.

  Thank you for your patience.
---
mandatory: True
code: |
  if user_understands_no_attorney_client_relationship == "understands":
    need(client_done)
  else:
    need(client_kicked_out)
comment: |
  This is the code that directs the flow of the interview.  It
  indicates to the system that we need to get to the endpoint
  "client_done."  There is a question below that "sets" the variable
  "client_done."  Docassemble will ask all the questions necessary to
  get the information need to pose that that final question to the
  user.

  However, if the answer to the question
  user_understands_no_attorney_client_relationship is not
  "understands," the interview will looks for a question that sets the
  variable "client_kicked_out."
  
  "Mandatory" sections like this one are evaluated in the order they appear
  in the question file.
---
progress: 100
question: |
  Sorry, you cannot proceed with the interview.
subquestion: |
  You can only proceed with the interview if you agree that your
  completion of the interview does not create an attorney-client
  relationship.

  % if user_understands_no_attorney_client_relationship == 'unsure':
  We suggest that you call us at 215-981-3800 to talk to us about the
  kinds of services we provide.
  % endif
decoration: exit
buttons:
  - Exit: exit
  - Restart: restart
sets: client_kicked_out
comment: |
  If docassemble is configured to show a progress bar, the progress bar will
  be set to 100% on this question, which is an endpoint question (since the only
  options are exiting or restarting).
---
generic object: Individual
question: |
  ${ x.do_question('have', capitalize=True) } a support order?
subquestion: |
  If you aren't sure, look through your papers for a document that looks
  something like this.  If this document is signed by the judge, then
  you have a support order.
    
  [IMAGE docassemble.demo:sample-support-order.jpg, 100%]
yesno: x.has_support_order
comment: |
  This question illustrates how you can include images in your questions.
  The file sample-support-order.jpg is stored in the docassemble.demo package
  in the subdirectory docassemble/demo/data/static.  This is how you refer to
  a "static" file that exists within a docassemble subpackage.
---
question: Is this reason a sound one?
subquestion: |
  The client, ${ client }, proposed the following reason for winning:
  
  > ${ explanation }

  Is this a sound reason for why the judge should rule in the client's
  favor in this ${ law_category } case?
yesno: explanation_is_sound
role: advocate
---
question: What form do you want to prepare?
decoration: document
sets:
  - pleading.title
  - law_category
  - pleading.type
buttons:
  - "Custody Complaint":
      code: |
        law_category = "custody"
        pleading.type = "complaint"
        pleading.title = "Complaint for Custody"
    image: parentchild
  - "Support Complaint":
      code: |
        law_category = "support"
        pleading.type = "complaint"
        pleading.title = "Complaint for Support"
    image: coins
comment: |
  This is an example of a multiple-choice question that runs Python
  code (as opposed to simply setting the value of a single variable.
  Questions that run Python code need to include a list of the
  variables that the code "sets," because docassemble is not able to
  determine these variables automatically, as it usually can.

  This example also shows how you can create square buttons with icons
  and labels: you just add an "image" value to the button item.
---
comment: |
  The following seven lines of code ask all the necessary questions to
  gather the names of the plaintiffs in the case, when the user may
  not be a plaintiff.
code: |
  case.plaintiff.gathering = True
  if client.is_plaintiff and client not in case.plaintiff:
    case.plaintiff.add(client)
  if case.plaintiff.number_gathered() == 0:
    newplaintiff = case.plaintiff.addObject(Individual)
  while case.plaintiff.there_is_another:
    newplaintiff = case.plaintiff.addObject(Individual)
    del case.plaintiff.there_is_another
  case.plaintiff.gathering = False
  case.plaintiff.gathered = True
---
comment: |
  This code will ask the user if he or she is a defendant, so long as the user
  is not already a plaintiff.  Then it will ask for the names of the defendants.
code: |
  case.defendant.gathering = True
  if client not in case.defendant and not client.is_plaintiff and client.is_defendant:
    case.defendant.add(client)
  if case.defendant.number_gathered() == 0:
    newdefendant = case.defendant.addObject(Individual)
  while case.defendant.there_is_another:
    newdefendant = case.defendant.addObject(Individual)
    del case.defendant.there_is_another
  case.defendant.gathering = False
  case.defendant.gathered = True
---
comment: |
  This code gathers the names of the children of all of the parties.
code: |
  people = [client]
  people.extend(case.parties())
  for indiv in people:
    indiv.child.gathered
---
comment: |
  This is an example of how docassemble can serve as an "expert system."
  The variable "client_has_standing" (a legal concept) can be set using simple
  logical expressions in Python.
code: |
  if client_has_injury and injury_in_jurisdiction and statute_of_limitations_ok:
    client_has_standing = True
  else:
    client_has_standing = False
---
question: Were you injured?
decoration: injury
yesno: client_has_injury
help: |
  An injury can take many forms.  It can be a physical injury or a
  purely financial injury.
progress: 50
---
question: |
  I understand that you live in ${ client.address.city }.
  Were you injured in ${ jurisdiction.state }?
yesno: injury_in_jurisdiction
---
question: When did your injury take place?
decoration: calendar
fields:
  - Date of Injury: injury_date
    datatype: date
---
generic object: Individual
comment: |
  This code gathers information about a person's income and assets if necessary.
code: |
  x.asset.gathering = True
  x.income.gathering = True
  assets_to_ask_about = ['checking', 'savings', 'stocksbonds']
  income_to_ask_about = ['employment', 'selfemployment', 'ssi', 'tanf']
  for asset_item in assets_to_ask_about:
    x.asset.new(asset_item, period=12)
  for income_item in income_to_ask_about:
    x.income.new(income_item, period=12)
  x.asset.gathering = False
  x.income.gathering = False
  x.asset.gathered = True
  x.income.gathered = True
---
question: |
  Why do you think you deserve to win this case?
fields:
  - "Reason you should win": explanation
    datatype: area
    hint: |
      I should win because . . .
---
code: |
  if client.address.address and retry_address:
    retry_address = False
    force_ask('client.address.address')
comment: |
  This is an example of how the "force_ask" function can be used to
  ask a question that has already been asked.
---
question: Would you like to enter your address yet again?
yesno: retry_address
---
code: |
  jurisdiction.state = "Pennsylvania"
  jurisdiction.county = "Philadelphia"
---
code: |
  if jurisdiction.state == "Pennsylvania":
      statute_of_limitations_years = 5
  else:
      statute_of_limitations_years = 2
---
code: |
  if jurisdiction.state == "Pennsylvania":
      if law_category == "custody" or law_category == "support":
          court.name = "Court of Common Pleas of " + jurisdiction.county + " County"
---
comment: |
  This block uses some Python functions to determine whether the date of the
  injury is within the statute of limitations period.
code: |
  cutoff = datetime.datetime.now() - dateutil.relativedelta.relativedelta(years=statute_of_limitations_years)
  if dateutil.parser.parse(injury_date) > cutoff:
      statute_of_limitations_ok = True
  else:
      statute_of_limitations_ok = False
---
generic object: Individual
decoration: home
question: |
  Where ${ x.do_question('live') }?
fields:
  - Type of home: x.address.type
    choices:
      - Apartment
      - Leased house
      - Owned house
      - Mobile home
  - Address: x.address.address
  - Unit: x.address.unit
    required: false
    help: The apartment, suite, or unit number of the residence.
  - City: x.address.city
  - State: x.address.state
    code: |
      us.states.mapping('abbr', 'name')
  - Zip: x.address.zip
    required: false
comment: |
  This question demonstrates fields that have the style of dropdown
  lists.  The values of a dropdown list can be generated with code
  that runs at the time the question is asked, or they can be
  hard-coded into the question itself.  The code here gets a list of
  U.S. states from a helpful Python module called "us."  Note that we
  imported this module earlier.
---
generic object: Individual
question: Please upload one or more pictures.
decoration: picture
fields:
  - A test file: x.picture
    datatype: files
comment: |
  You can accept files from users by using the datatype of "file."
---
comment: |
  This is how you can display a picture that a user has uploaded.
generic object: Individual
question: |
  % if x.picture.number() > 1:
  Are these the pictures you uploaded?
  % else:
  Is this the picture you uploaded?
  % endif
subquestion: |  
  ${ x.picture.show() }
yesno: x.picture_verified
---
comment: |
  docassemble uses the Mako templating system to expand variables
  within Markdown text.  Mako allows functions to be defined within
  source text using "def" constructs.  If you write Mako "def"
  functions, you may want to use them in more than one document.  This
  section shows how you can attach a name (e.g., kid_defs) to some
  Mako text, and an example below shows how an attachment can include
  this Mako text by referring to it by its name (kid_defs).

  Another way to write functions in docassemble is to write methods
  that act on docassemble objects, which you define in your objects.py
  file within your package.
def: kid_defs
mako: |
  <%def name="describe_as_adorable(person)"> \
  ${ person } is adorable. \
  </%def>
---
comment: |
  The following question is the interview's main endpoint.  This
  question has two attachment documents.  Most of the questions in the
  interview are asked because they are needed by this question or one
  of its attachments.

  This section demonstrates use of the "need" clause to gather
  information about the case's plaintiffs and defendants up front.
  This is not strictly necessary, because the case caption will cause
  those questions to be answered.  However, the "need" clause forces
  docassemble to gather the information up front, before it starts
  processing the question and its attachments.  This helps to direct
  the order of the questions in a more sensible fashion.
sets: client_done
need:
  - case.plaintiff.gathered
  - case.defendant.gathered
question: |
  % if client_has_standing:
    Congratulations!  You have a valid claim.
  % else:
    Sorry, you do not have a valid claim.
  % endif
subquestion: |
  Here is an advice letter and a pleading you can file.
decoration: finishline
buttons:
  - Exit: exit
  - Restart: restart
attachments:
  - name: Advice Letter for ${ client }
    description:
      This is a *very* helpful advice letter.
    content: |
      ${ today() }

      ${ client.address_block() }

      Dear ${ client.salutation() } ${ client.name.last }:

      Your marital status is ${ client.marital_status.lower() }.
      % if client.marital_status == 'Single':
        Perhaps you should marry ${ village_idiot }.
      % endif
      Your annual income is ${ currency(client.income.total()) }
      and the value of all you own is ${ currency(client.asset.total()) }.

      % if client_has_standing:
        You have a valid claim.
      % else:
        Sorry, you do not have a valid claim.
      % endif

      Carles 8-bit polaroid, banjo bespoke Intelligentsia actually
      PBR&B hashtag. Asymmetrical banjo mustache fashion axe cardigan,
      polaroid literally taxidermy cornhole authentic 3 wolf moon yr
      meditation. Kale chips cliche distillery, stumptown mustache DIY
      hella cred. Cardigan church-key stumptown organic. IPhone street
      art leggings, art party 8-bit Blue Bottle mustache aesthetic
      selvage cold-pressed High Life semiotics Bushwick retro
      Banksy. Aesthetic hella mumblecore, readymade gluten-free
      locavore cliche keytar XOXO tote bag. Put a bird on it swag
      bicycle rights trust fund, hella small batch tousled church-key
      bitters Brooklyn normcore Portland gentrify keytar Austin.

      Semiotics DIY cronut, stumptown McSweeney's 90's plaid pork
      belly Brooklyn squid gentrify chillwave. Occupy forage irony
      banjo heirloom. Irony health goth gentrify, plaid hella Etsy 3
      wolf moon American Apparel chillwave Truffaut retro synth
      artisan wolf bitters. Williamsburg flannel VHS, quinoa banjo
      fingerstache plaid vinyl meditation. Banksy Vice salvia pickled,
      selvage stumptown narwhal artisan Bushwick tilde Portland
      keffiyeh Carles food truck. Master cleanse Echo Park cardigan,
      selvage health goth next level keffiyeh shabby chic hashtag
      aesthetic taxidermy Carles irony fixie. Hella organic swag pork
      belly Bushwick.

      Banh mi stumptown migas, raw denim iPhone distillery
      Pinterest Schlitz. Raw denim Marfa typewriter mustache PBR&B
      cold-pressed. Locavore crucifix occupy, quinoa actually pickled
      ugh ennui VHS normcore literally jean shorts cred
      post-ironic. Godard Pitchfork narwhal direct trade deep v
      drinking vinegar, fingerstache authentic listicle. Kitsch
      literally VHS readymade distillery tattooed. Aesthetic High Life
      shabby chic, typewriter swag plaid Etsy photo booth craft
      beer. Disrupt yr semiotics, wayfarers meh scenester tattooed
      keffiyeh fingerstache meditation chia roof party migas.

      Chambray art party craft beer pork belly health goth,
      locavore photo booth pickled. Cold-pressed gentrify street art,
      butcher direct trade salvia twee hashtag. Flannel semiotics wolf
      next level Tumblr gluten-free. Sustainable shabby chic migas
      Intelligentsia, swag synth meh lumbersexual gentrify. Gastropub
      lumbersexual Blue Bottle, +1 sustainable heirloom meditation
      Pitchfork deep v try-hard blog vinyl. Tofu banjo Kickstarter
      post-ironic cray tilde Tumblr, Marfa polaroid wolf. Schlitz
      selvage narwhal fanny pack, mustache scenester leggings cardigan
      Kickstarter street art polaroid fixie aesthetic PBR&B.

      Semiotics DIY cronut, stumptown McSweeney's 90's plaid pork
      belly Brooklyn squid gentrify chillwave. Occupy forage irony
      banjo heirloom. Irony health goth gentrify, plaid hella Etsy 3
      wolf moon American Apparel chillwave Truffaut retro synth
      artisan wolf bitters. Williamsburg flannel VHS, quinoa banjo
      fingerstache plaid vinyl meditation. Banksy Vice salvia pickled,
      selvage stumptown narwhal artisan Bushwick tilde Portland
      keffiyeh Carles food truck. Master cleanse Echo Park cardigan,
      selvage health goth next level keffiyeh shabby chic hashtag
      aesthetic taxidermy Carles irony fixie. Hella organic swag pork
      belly Bushwick.

      If you have any questions, you can call us at 215-391-9686.

      Sincerely,

      /s/

      John Smith, Attorney
    metadata:
      FirstHeaderRight: "Philadelphia Legal Assistance [NEWLINE] 718 Arch Street, Suite 300N [NEWLINE] Philadelphia, PA 19106"
      HeaderLeft: "${ client } [NEWLINE] ${ today() } [NEWLINE] Page [PAGENUM]"
      HeaderLines: "3"
      SingleSpacing: true
    filename: Advice_letter_${ space_to_underscore(client) }
  - name: ${ pleading.title }
    usedefs:
      - kid_defs
    content: |
      ${ pleading.caption() }

      I am the ${ case.role_of(client) } in this case.
      % if client.child.number() > 0:
      I have ${ client.child.number_as_word() } ${ client.child.as_noun() }:

      % for child in client.child:
      #. ${ child }
      % endfor

      % for child in client.child:
      ${ describe_as_adorable(child) }
      % endfor
      Aren't children such a blessing?
      % if client.has_support_order:
      I already have a support order.
      % endif
      % endif

      <%
        index = 0
      %>
      % for party in case.parties():
      The ${ ordinal(index) } party in this case is ${ party },
      a ${ case.role_of(party) },
      % if party.child.number() > 0:
      who has the following ${ party.child.as_noun() }:

      % for child in party.child:
      * ${ child }
      % endfor

      % else:
      who has no children.
      % endif
      <%
        index += 1
      %>
      % endfor
      
      This petition should be granted.  ${ explanation }
      % if client.picture_verified:
      Look how cute I am:

      [FLUSHLEFT] ${ client.picture.show() }
      % endif

      Chambray art party craft beer pork belly health goth, locavore
      photo booth pickled. Cold-pressed gentrify street art, butcher
      direct trade salvia twee hashtag. Flannel semiotics wolf next
      level Tumblr gluten-free. Sustainable shabby chic migas
      Intelligentsia, swag synth meh lumbersexual gentrify. Gastropub
      lumbersexual Blue Bottle, +1 sustainable heirloom meditation
      Pitchfork deep v try-hard blog vinyl. Tofu banjo Kickstarter
      post-ironic cray tilde Tumblr, Marfa polaroid wolf. Schlitz
      selvage narwhal fanny pack, mustache scenester leggings cardigan
      Kickstarter street art polaroid fixie aesthetic PBR&B.

      Please grant me the relief I request!

      [FLUSHLEFT] Respectfully submitted,

      % if client.signature_verified:
      [FLUSHLEFT] ${ client.signature.show(width='2in') }
      % else:
      [FLUSHLEFT] ${ blank_signature }
      % endif

      [FLUSHLEFT] ${ client }, ${ titlecase(case.role_of(client)) }
    metadata:
      FirstFooterCenter: "[HYPHEN] [PAGENUM] [HYPHEN]"
      FooterCenter: "[HYPHEN] [PAGENUM] [HYPHEN]"
      FirstFooterLeft: "${ pleading.title }"
      FooterLeft: "${ pleading.title }"
    filename: ${ space_to_underscore(pleading.title) }
help: |
  This is the end of the interview, ${ client }.  You can exit or restart.

  I hope you enjoyed this interview.
progress: 100
---
question: |
  What is the specific airspeed velocity?
fields:
  - Velocity: airspeed_velocity
...
